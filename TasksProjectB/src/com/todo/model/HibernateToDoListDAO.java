package com.todo.model;

import java.util.List;

import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.AnnotationConfiguration;

public class HibernateToDoListDAO implements IToDoListDAO{
	private static HibernateToDoListDAO instance = null;
	private SessionFactory factory;
	
	/**
	 * private c'tor  , build factory once, the same factory is used by all DAO methods
	 */
	private HibernateToDoListDAO(){
		factory = new AnnotationConfiguration().configure().buildSessionFactory();
	}
	
	/**
	 * singleton pattern
	 */
	public static HibernateToDoListDAO getInstance(){
		if (instance == null){
			instance = new HibernateToDoListDAO();
		}
		return instance;
	}

	/**
	 * receives TodoItem object saves it in the database using Hibernate method save(), 
	 *will return the unique id that generated by Hibernate
	 */
	@Override
	public Integer createItem(TodoItem item)  throws TodoPlatformException{
		
		Session session = factory.openSession();
		
		try
		{
			session.beginTransaction();
			session.save(item);
			session.getTransaction().commit();
		}
		catch ( HibernateException e )
		{
			if (session.getTransaction() != null)
				session.getTransaction().rollback();
			throw new TodoPlatformException(e.getMessage(),e);
		}
		finally
		{
			try
			{
				session.close();
			}
			catch( HibernateException e )
			{
				if ( session.getTransaction() != null )
					session.getTransaction().rollback();
				throw new TodoPlatformException(e.getMessage(),e);
			}
		}
		
		return item.getId();
		
	}

	/**
	 * will return the entire items table as a list form database using explicit SQL query "FROM TodoItem"
	 */
	@Override
	public List<TodoItem> readItemList()  throws TodoPlatformException{
		
		Session session = factory.openSession();
		
		try
		{
			Query query = session.createQuery("FROM TodoItem");
			@SuppressWarnings("unchecked")
			List<TodoItem> itemList = query.list();
			return itemList;
		}
		catch ( HibernateException e )
		{
			throw new TodoPlatformException(e.getMessage(),e);
		}
		finally
		{
			try
			{
				session.close();
			}
			catch( HibernateException e )
			{
				if ( session.getTransaction() != null )
					session.getTransaction().rollback();
				throw new TodoPlatformException(e.getMessage(),e);
			}
		}
	}

	/**
	 * replace the item in the DB with a new one (keeps the ID)
	 * will take the item from the DB according to the desiredID
	 * change it's values according to the new item
	 * and write it back to the DB using Hibernate method "merge()"
	 */
	@Override
	public Boolean replaceItem(TodoItem newItem, Integer desiredID)  throws TodoPlatformException{
		// TODO Auto-generated method stub
		Session session = factory.openSession();
	
		try{
			TodoItem item = getItemByID(desiredID);
			if (item == null){
				return false;
			}
			session.beginTransaction();
			item.setDate(newItem.getDate());
			item.setSubject(newItem.getSubject());
			item.setUserId(newItem.getUserId());
			session.merge(item);
			session.getTransaction().commit();
			return true;
		}
		catch ( HibernateException e ){
			if ( session.getTransaction() != null )
				session.getTransaction().rollback();
			throw new TodoPlatformException(e.getMessage(),e);
		}
		finally
		{
			try
			{
				session.close();
			}
			catch( HibernateException e )
			{
				if ( session.getTransaction() != null )
					session.getTransaction().rollback();
				throw new TodoPlatformException(e.getMessage(),e);
			}
		}
	}

	/**
	 * will delete a specified item using explicit SQL query
	 */
	@Override
	public Boolean deleteItem(Integer id)  throws TodoPlatformException{
		// TODO Auto-generated method stub
		Session session = factory.openSession();
		
		try
		{
			Query query = session.createQuery("delete TodoItem where id = " + id.toString());
			int result = query.executeUpdate();
			
			if (result > 0) {
			    return true;
			}
			else
				return false;
		}
		catch ( HibernateException e )
		{
			if ( session.getTransaction() != null )
			session.getTransaction().rollback();
			throw new TodoPlatformException(e.getMessage(),e);
		}
		finally
		{
			try
			{
				session.close();
			}
			catch( HibernateException e )
			{
				if ( session.getTransaction() != null )
					session.getTransaction().rollback();
				throw new TodoPlatformException(e.getMessage(),e);
			}
		}
	}

	/**
	 * return an item by the given id using Hibernate's get() method
	 */
	@Override
	public TodoItem getItemByID(Integer id)  throws TodoPlatformException{
		// TODO Auto-generated method stub
		Session session = factory.openSession();
		try
		{
			TodoItem item = (TodoItem) session.get(TodoItem.class, id);
			return item;
		}
		catch ( HibernateException e )
		{
			if ( session.getTransaction() != null )
				session.getTransaction().rollback();
			throw new TodoPlatformException(e.getMessage(),e);
		}
		finally
		{
			try
			{
				session.close();
			}
			catch( HibernateException e )
			{
				if ( session.getTransaction() != null )
					session.getTransaction().rollback();
				throw new TodoPlatformException(e.getMessage(),e);
			}
		}
	}

	/**
	 * will delete entire items table using explicit SQL query "DELETE FROM TodoItem"
	 */
	@Override
	public Boolean deleteAllItems()  throws TodoPlatformException{
		
		Session session = factory.openSession();
		
		try
		{
			Query query = session.createQuery("DELETE FROM TodoItem");
			int result = query.executeUpdate();
			
			if (result > 0){
			    System.out.println("IItems table was deleted");
			    return true;
			}
			else
				return false;
			
		}
		catch ( HibernateException e )
		{
			if ( session.getTransaction() != null )
				session.getTransaction().rollback();
			throw new TodoPlatformException(e.getMessage(),e);
		}
		finally
		{
			try
			{
				session.close();
			}
			catch( HibernateException e )
			{
				if ( session.getTransaction() != null )
					session.getTransaction().rollback();
				throw new TodoPlatformException(e.getMessage(),e);
			}
		}
	}

	/**
	 *receives User object and saves it in the database using Hibernate method save(), 
	 *will return the unique id that was generated by Hibernate
	 *if fails return -1
	 */
	@Override
	public Integer createUser(User user)  throws TodoPlatformException{
		// TODO Auto-generated method stub
	Session session = factory.openSession();
		
		try
		{
			session.beginTransaction();
			session.save(user);
			session.getTransaction().commit();
		}
		catch ( HibernateException e )
{
			if ( session.getTransaction() != null )
				session.getTransaction().rollback();
			throw new TodoPlatformException(e.getMessage(),e);
		}
		finally
		{
			try
			{
				session.close();
			}
			catch( HibernateException e )
			{
				if ( session.getTransaction() != null )
					session.getTransaction().rollback();
				throw new TodoPlatformException(e.getMessage(),e);
			}
		}
		
		return user.getId();
		
	}

	/**
	 * will return the entire users table as a list from database using explicit SQL query "FROM User"
	 */
	@Override
	public List<User> readUserList()  throws TodoPlatformException{
		// TODO Auto-generated method stub
		Session session = factory.openSession();
		
		try
		{
			Query query = session.createQuery("FROM User");
			@SuppressWarnings("unchecked")
			List<User> userList = query.list();
			return userList;
		}
		catch ( HibernateException e )
		{
			throw new TodoPlatformException(e.getMessage(),e);
		}
		finally
		{
			try
			{
				session.close();
			}
			catch( HibernateException e )
			{
				throw new TodoPlatformException(e.getMessage(),e);
			}
		}
	}

	/** 
	 * replace the item in the DB with a new one (keeps the ID)
	 * will take the item from the DB according to the desiredID
	 * change it's values according to the new item
	 * and write it back to the DB using Hibernate method "merge()"
	 */
	@Override
	public Boolean replaceUser(User newUser, Integer id)  throws TodoPlatformException{
		// TODO Auto-generated method stub
		Session session = factory.openSession();
		
		try{
			User oldUser = findUserByID(id);
			if (oldUser == null){
				return false;
			}
			session.beginTransaction();
			oldUser.setFirstName(newUser.getFirstName());
			oldUser.setLastName(newUser.getLastName());
			oldUser.setPassword(newUser.getPassword());
			oldUser.setUserName(newUser.getUserName());
			session.merge(oldUser);
			session.getTransaction().commit();
			return true;
		}
		catch ( HibernateException e ){
			if ( session.getTransaction() != null )
				session.getTransaction().rollback();
			throw new TodoPlatformException(e.getMessage(),e);
		}
		finally
		{
			try
			{
				session.close();
			}
			catch( HibernateException e )
			{
				if ( session.getTransaction() != null )
					session.getTransaction().rollback();
				throw new TodoPlatformException(e.getMessage(),e);
			}
		}
	}

	/**
	 * will delete a specified user using explicit SQL query
	 */
	@Override
	public Boolean deleteUser(Integer id)  throws TodoPlatformException{
		// TODO Auto-generated method stub
		Session session = factory.openSession();
		
		try
		{
			Query query = session.createQuery("delete User where id = " + id.toString());
			int result = query.executeUpdate();
			
			if (result > 0) {
			    System.out.println("User ID " + id + " was removed from database");
			    return true;
			}
			else
				return false;
		}
		catch ( HibernateException e )
		{
			if ( session.getTransaction() != null )
			session.getTransaction().rollback();
			throw new TodoPlatformException(e.getMessage(),e);
		}
		finally
		{
			try
			{
				session.close();
			}
			catch( HibernateException e )
			{
				if ( session.getTransaction() != null )
					session.getTransaction().rollback();
				throw new TodoPlatformException(e.getMessage(),e);
			}
		}
	}

	/**
	 * return a user object by the given id using Hibernate's get() method
	 */
	@Override
	public User findUserByID(Integer id)  throws TodoPlatformException{
		// TODO Auto-generated method stub
		Session session = factory.openSession();
		try
		{
			User user = (User) session.get(User.class, id);
			return user;
		}
		catch ( HibernateException e )
		{
			if ( session.getTransaction() != null )
				session.getTransaction().rollback();
			throw new TodoPlatformException(e.getMessage(),e);
		}
		finally
		{
			try
			{
				session.close();
			}
			catch( HibernateException e )
			{
				if ( session.getTransaction() != null )
					session.getTransaction().rollback();
				throw new TodoPlatformException(e.getMessage(),e);
			}
		}
	}

	/**
	 * will delete the entire users table using explicit SQL query "DELETE FROM User"
	 */
	@Override
	public void deleteAllUsers()  throws TodoPlatformException{
		// TODO Auto-generated method stub
		Session session = factory.openSession();
		
		try
		{
			Query query = session.createQuery("DELETE FROM User");
			int result = query.executeUpdate();
			
			if (result > 0)
			    System.out.println("Users table was deleted");
		}
		catch ( HibernateException e )
		{
			if ( session.getTransaction() != null )
			session.getTransaction().rollback();
			throw new TodoPlatformException(e.getMessage(),e);
		}
		finally
		{
			try
			{
				session.close();
			}
			catch( HibernateException e )
			{
				if ( session.getTransaction() != null )
					session.getTransaction().rollback();
				throw new TodoPlatformException(e.getMessage(),e);
			}
		}
	}
	
	/**
	 * This method use the getUserIdByUsername to receive user id by sending the username
	 * will use that ID to obtain the User object by findUserByID() method.
	 * will return null if no such User exists
	 * @throw TodoPlatformException
	 * @see #getUserIdByUsername(String)
	 * @see #findUserByID(Integer)
	 */
	@Override
	public User getUserByUsername(String username)  throws TodoPlatformException{
		
		Integer id = getUserIdByUsername(username);
		if (id != null){
			return findUserByID(id);
		}
		return null;

	}

	/**
	 * This method use the getUs erIdByUsername to receive user id by sending the username
	 * will use that ID to obtain List<TodoItem> object by getUserIdByUsername() method.
	 * will return null if no such User exists
	 * @throw TodoPlatformException
	 * @see #getUserIdByUsername(String)
	 * @see #getItemListByUserId(int)
	 */
	@Override
	public List<TodoItem> getItemListByUsername(String username) throws TodoPlatformException {
		Integer userId = getUserIdByUsername(username);
		if (userId != null){
			return getItemListByUserId(userId);
		}
		return null;
		
	}
	
	/**
	 * will try to create a direct SQL query like: "FROM TodoItem WHERE userId = " + userId"
	 * and return a List<TodoItem>
	 * will return null if failed
	 */
	@Override
	public List<TodoItem> getItemListByUserId(int userId) throws TodoPlatformException {

		Session session = factory.openSession();
		
		try
		{
			Query query = session.createQuery("FROM TodoItem WHERE userId = " + userId);
			@SuppressWarnings("unchecked")
			List<TodoItem> itemList = query.list();
			return itemList;
		}
		catch ( HibernateException e )
		{
			throw new TodoPlatformException(e.getMessage(),e);
		}
		finally
		{
			try
			{
				session.close();
			}
			catch( HibernateException e )
			{
				if ( session.getTransaction() != null )
					session.getTransaction().rollback();
				throw new TodoPlatformException(e.getMessage(),e);
			}
		}
	}

	/**
	 * will search the user ID by the given username
	 * by: get a List<User> from readUserList() #readUserList
	 * loops through the User list and search for the username
	 * once found will return the user's id
	 * if username wasn't found will return null
	 * @see #readUserList()
	 */
	@Override
	public Integer getUserIdByUsername(String username) throws TodoPlatformException {
		List<User> userList = readUserList();
		for(User user : userList){
			if(username.equals(user.getUserName())){
				return user.getId();
			}
		}
		return null;
	}
}
